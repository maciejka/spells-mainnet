// SPDX-License-Identifier: AGPL-3.0-or-later

pragma solidity 0.6.12;

import "./DssSpell.t.base.sol";
import "dss-interfaces/Interfaces.sol";

interface Gem6Like {
    function implementation() external view returns (address);
}

interface GemJoin6Like {
    function implementations(address) external view returns (uint256);
    function join(address, uint256) external;
    function exit(address, uint256) external;
}

interface AuthLike {
    function wards(address) external view returns (uint256);
}

contract DssSpellTest is DssSpellTestBase {


    function testVestDAI() public {
        VestAbstract vest = VestAbstract(addr.addr("MCD_VEST_DAI"));

        uint256 APR_01_2022 = 1648771200;
        uint256 APR_15_2022 = 1649980800;

        address OLD_GELATO_STREAM_ADDRESS = 0x926c21602FeC84d6d0fA6450b40Edba595B5c6e4;

        assertEq(vest.ids(), 36);

        assertTrue(vest.valid(36));
        assertEq(vest.fin(36), 1664582400);

        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // Gelato Offboarding
        assertEq(vest.usr(36), OLD_GELATO_STREAM_ADDRESS);
        assertEq(vest.bgn(36), APR_01_2022);
        assertEq(vest.clf(36), APR_01_2022);
        assertEq(vest.fin(36), block.timestamp); // ensure stream is cancelled
        assertEq(vest.mgr(36), address(0));
        assertEq(vest.res(36), 1);

        assertEq(vest.ids(), 37);

        // // ----- Gov Wallet
        assertEq(vest.usr(37), wallets.addr("GELATO_VEST_STREAMING"));
        assertEq(vest.bgn(37), APR_15_2022);
        assertEq(vest.clf(37), APR_15_2022);
        assertEq(vest.fin(37), APR_15_2022 + 183 days);
        assertEq(vest.mgr(37), address(0));
        assertEq(vest.res(37), 1);
        assertEq(vest.tot(37), 183_000 * WAD);
        assertEq(vest.rxd(37), 0);
    }

    function testSpellIsCast_GENERAL() public {
        string memory description = new DssSpell().description();
        assertTrue(bytes(description).length > 0, "TestError/spell-description-length");
        // DS-Test can't handle strings directly, so cast to a bytes32.
        assertEq(stringToBytes32(spell.description()),
                stringToBytes32(description), "TestError/spell-description");

        if(address(spell) != address(spellValues.deployed_spell)) {
            assertEq(spell.expiration(), block.timestamp + spellValues.expiration_threshold, "TestError/spell-expiration");
        } else {
            assertEq(spell.expiration(), spellValues.deployed_spell_created + spellValues.expiration_threshold, "TestError/spell-expiration");

            // If the spell is deployed compare the on-chain bytecode size with the generated bytecode size.
            // extcodehash doesn't match, potentially because it's address-specific, avenue for further research.
            address depl_spell = spellValues.deployed_spell;
            address code_spell = address(new DssSpell());
            assertEq(getExtcodesize(depl_spell), getExtcodesize(code_spell), "TestError/spell-codesize");
        }

        assertTrue(spell.officeHours() == spellValues.office_hours_enabled, "TestError/spell-office-hours");

        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done(), "TestError/spell-not-done");

        checkSystemValues(afterSpell);

        checkCollateralValues(afterSpell);
    }

    function testPayments() public {
        uint256 amountGrowthCU = 474683;
        uint256 amountAmbassadorWallet = 25000;

        uint256 prevSin = vat.sin(address(vow));

        // Core Units
        uint256 prevDaiGrowthCU = dai.balanceOf(wallets.addr("GRO_WALLET"));

        // Ambassador Program
        uint256 prevDaiAmbassadorWallet = dai.balanceOf(wallets.addr("AMBASSADOR_WALLET"));

        uint256 amount = amountGrowthCU + amountAmbassadorWallet;

        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        assertEq(vat.sin(address(vow)) - prevSin, amount * RAD);

        // // Recognized Delegates
        assertEq(dai.balanceOf(wallets.addr("GRO_WALLET")) - prevDaiGrowthCU, amountGrowthCU * WAD);
        assertEq(dai.balanceOf(wallets.addr("AMBASSADOR_WALLET")) - prevDaiAmbassadorWallet, amountAmbassadorWallet * WAD);

    }

    function testCollateralIntegrations() public { // make public to use
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // Insert new collateral tests here
        // checkIlkIntegration(
        //     "TOKEN-X",
        //     GemJoinAbstract(addr.addr("MCD_JOIN_TOKEN_X")),
        //     ClipAbstract(addr.addr("MCD_CLIP_TOKEN_X")),
        //     addr.addr("PIP_TOKEN"),
        //     true,
        //     true,
        //     false
        // );

        checkIlkIntegration(
             "TUSD-A",
             GemJoinAbstract(addr.addr("MCD_JOIN_TUSD_A")),
             ClipAbstract(addr.addr("MCD_CLIP_TUSD_A")),
             addr.addr("PIP_TUSD"),
             false,
             true,
             false
        );
    }

    function testNewChainlogValues() public { // make public to use
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // Insert new chainlog values tests here
        // assertEq(chainLog.getAddress("XXX"), addr.addr("XXX"));
        // assertEq(chainLog.version(), "1.X.X");

        assertEq(chainLog.getAddress("MCD_CLIP_CALC_TUSD_A"), addr.addr("MCD_CLIP_CALC_TUSD_A"));
        assertEq(chainLog.version(), "1.11.1");
    }

    function testNewIlkRegistryValues() private { // make public to use
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // Insert new ilk registry values tests here
        assertEq(reg.pos("XXX-A"), 48);
        assertEq(reg.join("XXX-A"), addr.addr("MCD_JOIN_XXX_A"));
        assertEq(reg.gem("XXX-A"), addr.addr("XXX"));
        assertEq(reg.dec("XXX-A"), GemAbstract(addr.addr("XXX")).decimals());
        assertEq(reg.class("XXX-A"), 1);
        assertEq(reg.pip("XXX-A"), addr.addr("PIP_XXX"));
        assertEq(reg.xlip("XXX-A"), addr.addr("MCD_CLIP_XXX_A"));
        assertEq(reg.name("XXX-A"), "xxx xxx xxx");
        assertEq(reg.symbol("XXX-A"), "xxx");
    }

    function testFailWrongDay() public {
        require(spell.officeHours() == spellValues.office_hours_enabled);
        if (spell.officeHours()) {
            vote(address(spell));
            scheduleWaitAndCastFailDay();
        } else {
            revert("Office Hours Disabled");
        }
    }

    function testFailTooEarly() public {
        require(spell.officeHours() == spellValues.office_hours_enabled);
        if (spell.officeHours()) {
            vote(address(spell));
            scheduleWaitAndCastFailEarly();
        } else {
            revert("Office Hours Disabled");
        }
    }

    function testFailTooLate() public {
        require(spell.officeHours() == spellValues.office_hours_enabled);
        if (spell.officeHours()) {
            vote(address(spell));
            scheduleWaitAndCastFailLate();
        } else {
            revert("Office Hours Disabled");
        }
    }

    function testOnTime() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
    }

    function testCastCost() public {
        vote(address(spell));
        spell.schedule();

        castPreviousSpell();
        hevm.warp(spell.nextCastTime());
        uint256 startGas = gasleft();
        spell.cast();
        uint256 endGas = gasleft();
        uint256 totalGas = startGas - endGas;

        assertTrue(spell.done());
        // Fail if cast is too expensive
        assertTrue(totalGas <= 10 * MILLION);
    }

    function test_OSMs() private { // make public to use
        address READER_ADDR = address(spotter);

        // Track OSM authorizations here
        assertEq(OsmAbstract(addr.addr("PIP_XXX")).bud(READER_ADDR), 0);

        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        assertEq(OsmAbstract(addr.addr("PIP_XXX")).bud(READER_ADDR), 1);
    }

    function test_Medianizers() private { // make public to use
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // Track Median authorizations here
        address PIP     = addr.addr("PIP_XXX");
        address MEDIAN  = OsmAbstract(PIP).src();
        assertEq(MedianAbstract(MEDIAN).bud(PIP), 1);
    }

    function test_auth() public {
        checkAuth(false);
    }

    function test_auth_in_sources() public {
        checkAuth(true);
    }
}
